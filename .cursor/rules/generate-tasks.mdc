---
description: Guide for creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD)
globs: 
alwaysApply: false
---
# Rule: Generating a Task List from a PRD

## Goal

To guide an AI assistant in creating a detailed, step-by-step task list in Markdown format based on an existing Product Requirements Document (PRD). The task list should guide a junior data scientist or junior developer through implementation in a Python-based environment.

## Output

- **Format:** Markdown (`.md`)
- **Location:** `/tasks/`
- **Filename:** `tasks-[prd-file-name].md` (e.g., `tasks-prd-model-validation.md`)

## Process

1.  **Receive PRD Reference:** The user points the AI to a specific PRD file
2.  **Analyze PRD:** The AI reads and analyzes the functional requirements, user stories, and other sections of the specified PRD.
3.  **Phase 1: Generate Parent Tasks:** Based on the PRD analysis, create the file and generate the main, high-level tasks required to implement the feature. Use your judgement on how many high-level tasks to use. It's likely to be about 5. Present these tasks to the user in the specified format (without sub-tasks yet). Inform the user: "I have generated the high-level tasks based on the PRD. Ready to generate the sub-tasks? Respond with 'Go' to proceed."
4.  **Wait for Confirmation:** Pause and wait for the user to respond with "Go".
5.  **Phase 2: Generate Sub-Tasks:** Once the user confirms, break down each parent task into smaller, actionable sub-tasks necessary to complete the parent task. Ensure sub-tasks logically follow from the parent task and cover the implementation details implied by the PRD.
6.  **Identify Relevant Files:** Based on the tasks and PRD, identify potential files that will need to be created or modified. List these under the `Relevant Files` section, including corresponding test files, notebooks, and configuration files if applicable.
7.  **Generate Final Output:** Combine the parent tasks, sub-tasks, relevant files, and notes into the final Markdown structure.
8.  **Save Task List:** Save the generated document in the `/tasks/` directory with the filename `tasks-[prd-file-name].md`, where `[prd-file-name]` matches the base name of the input PRD file (e.g., if the input was `prd-model-validation.md`, the output is `tasks-prd-model-validation.md`).

## Output Format

The generated task list _must_ follow this structure:

```markdown
## Relevant Files

- `src/module_name/core.py` - Brief description of why this file is relevant (e.g., Contains the main model implementation).
- `src/module_name/utils.py` - Brief description (e.g., Utility functions for data preprocessing).
- `examples/example_analysis.py` - Brief description (e.g., Example script demonstrating the feature).
- `examples/notebooks/analysis_demo.py` - Marimo notebook for interactive analysis and demonstration.
- `tests/unit/test_core.py` - Unit tests for `core.py`.
- `tests/unit/test_utils.py` - Unit tests for `utils.py`.
- `tests/integration/test_full_pipeline.py` - Integration tests for the complete feature.
- `pixi.toml` - Pixi environment configuration with required dependencies.
- `README.md` - Documentation updates to reflect new features.

### Notes

- **Environment Management:** Use Pixi for reproducible environments. Run `pixi install` to set up the environment.
- **Notebooks:** Create Marimo notebooks (`.py` files) in `examples/notebooks/` for interactive analysis. Convert to `.ipynb` when ready for distribution using `marimo export notebook.py`.
- **Testing:** Use `pytest tests/` to run all tests or `pytest tests/unit/test_specific_module.py` for specific tests.
- **Code Quality:** Follow PEP 8 style guidelines and use type hints where appropriate.
- **Documentation:** Update docstrings and README files to reflect new functionality.

## Tasks

- [ ] 1.0 Parent Task Title
  - [ ] 1.1 [Sub-task description 1.1]
  - [ ] 1.2 [Sub-task description 1.2]
- [ ] 2.0 Parent Task Title
  - [ ] 2.1 [Sub-task description 2.1]
- [ ] 3.0 Parent Task Title (may not require sub-tasks if purely structural or configuration)
```

## Interaction Model

The process explicitly requires a pause after generating parent tasks to get user confirmation ("Go") before proceeding to generate the detailed sub-tasks. This ensures the high-level plan aligns with user expectations before diving into details.

## Target Audience

Assume the primary reader of the task list is a **junior data scientist** or **junior developer** who will implement the feature in a Python environment.

## Python Data Science Best Practices

- **Modular Design:** Organize code into logical modules with clear separation of concerns
- **Type Hints:** Use type hints for better code documentation and IDE support
- **Error Handling:** Implement proper exception handling with informative error messages
- **Logging:** Use Python's logging module for debugging and monitoring
- **Configuration:** Use environment variables or configuration files for parameters
- **Data Validation:** Implement input validation using libraries like Pydantic or similar
- **Performance:** Consider using NumPy, Pandas, or other optimized libraries for data operations
- **Reproducibility:** Ensure all random operations use fixed seeds where appropriate
